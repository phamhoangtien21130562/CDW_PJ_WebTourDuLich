import React, { useEffect, useState } from "react";
import axios from "axios";
import { Table, Button, Container, Card, Badge } from "react-bootstrap";
import { PencilSquare, Trash } from "react-bootstrap-icons";
import { useNavigate } from "react-router-dom";
import Swal from "sweetalert2";



interface Tour {
  id: string;
  title: string;
  price: number;
  availabilityStatus: string | null;
  startDate: string | null;
  endDate: string | null;
}

const Tours: React.FC = () => {
  const navigate = useNavigate();
  const [tours, setTours] = useState<Tour[]>([]);
  const [loading, setLoading] = useState<boolean>(true);

  useEffect(() => {
    const fetchTours = async () => {
      try {
        const res = await axios.get<Tour[]>("http://localhost:8080/api/tours");
        setTours(res.data);
      } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch tours:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchTours();
  }, []);
const handleDelete = async (id: string) => {
    const result = await Swal.fire({
      title: "B·∫°n c√≥ ch·∫Øc mu·ªën xo√° tour n√†y?",
      text: "H√†nh ƒë·ªông n√†y s·∫Ω xo√° m·ªÅm tour kh·ªèi h·ªá th·ªëng!",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#d33",
      cancelButtonColor: "#3085d6",
      confirmButtonText: "C√≥, xo√° ƒëi!",
      cancelButtonText: "Hu·ª∑",
    });

    if (result.isConfirmed) {
      try {
        await axios.delete(`http://localhost:8080/api/tours/${id}`);
        Swal.fire("ƒê√£ xo√°!", "Tour ƒë√£ ƒë∆∞·ª£c xo√°.", "success");
        // Load l·∫°i danh s√°ch tours sau khi xo√°
        setLoading(true);
        const res = await axios.get<Tour[]>("http://localhost:8080/api/tours");
        setTours(res.data);
      } catch (error) {
        console.error("L·ªói khi xo√° tour:", error);
        Swal.fire("L·ªói", "Kh√¥ng th·ªÉ xo√° tour l√∫c n√†y.", "error");
      } finally {
        setLoading(false);
      }
    }
  };

  const getStatusBadge = (status: string | null) => {
    switch (status) {
      case "C√≤n ch·ªó":
        return <Badge bg="success">üü¢ {status}</Badge>;
      case "H·∫øt ch·ªó":
        return <Badge bg="warning">üü† {status}</Badge>;
      case "ƒê√£ k·∫øt th√∫c":
        return <Badge bg="danger">üî¥ {status}</Badge>;
      default:
        return <Badge bg="secondary">Ch∆∞a x√°c ƒë·ªãnh</Badge>;
    }
  };

  // Format ti·ªÅn VNƒê
  const formatCurrency = (amount: number) =>
    amount.toLocaleString("vi-VN", { style: "currency", currency: "VND" });

  // Format ng√†y (c√≥ th·ªÉ null)
  const formatDate = (dateStr: string | null) => {
    if (!dateStr) return "";
    const d = new Date(dateStr);
    return d.toLocaleDateString("vi-VN");
  };

  if (loading) return <div>ƒêang t·∫£i d·ªØ li·ªáu...</div>;

  return (
    <Container className="mt-4">
      <Card className="shadow-sm">
        <Card.Header className="bg-primary text-white d-flex justify-content-between align-items-center">
          <h4 className="mb-0">Danh s√°ch Travel</h4>
          <Button variant="light" onClick={() => navigate("/addtour")}>
            + Th√™m Tour
          </Button>
        </Card.Header>
        <Card.Body>
          <Table striped bordered hover responsive>
            <thead className="table-dark">
              <tr>
                <th>#</th>
                <th>T√™n travel</th>
                <th>Gi√°</th>
                <th>Ng√†y KH</th>
                <th>Ng√†y KT</th>
                <th>Tr·∫°ng th√°i</th>
                <th className="text-center">H√†nh ƒë·ªông</th>
              </tr>
            </thead>
            <tbody>
              {tours.length === 0 && (
                <tr>
                  <td colSpan={7} className="text-center">
                    Kh√¥ng c√≥ tour n√†o.
                  </td>
                </tr>
              )}
              {tours.map((tour, index) => (
                <tr key={tour.id}>
                  <td>{index + 1}</td>
                  <td>{tour.title}</td>
                  <td>{formatCurrency(tour.price)}</td>
                  <td>{formatDate(tour.startDate)}</td>
                  <td>{formatDate(tour.endDate)}</td>
                  <td>{getStatusBadge(tour.availabilityStatus)}</td>
                  <td className="text-center">
                    <Button variant="info" size="sm" className="me-1" onClick={() => navigate(`/admin/tours/edit/${tour.id}`)}>
                      <PencilSquare size={16} /> Ch·ªânh s·ª≠a
                    </Button>
                  <Button
              variant="danger"
              size="sm"
              onClick={() => handleDelete(tour.id)}
            >
              <Trash size={16} /> X√≥a
            </Button>
                  </td>
                </tr>
              ))}
            </tbody>
          </Table>
        </Card.Body>
      </Card>
    </Container>
  );
};

export default Tours;
