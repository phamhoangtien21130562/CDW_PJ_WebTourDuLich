import React, { useEffect, useState } from "react";
import { Container, Row, Col, Card, Table, Badge } from "react-bootstrap";
import { Cart, People, Globe, CurrencyDollar } from "react-bootstrap-icons";
import { Line } from "react-chartjs-2";
import axios from "axios";

import {
    Chart as ChartJS,
    CategoryScale,
    LinearScale,
    PointElement,
    LineElement,
    Title,
    Tooltip,
    Legend
} from "chart.js";

// ƒêƒÉng k√Ω c√°c th√†nh ph·∫ßn c·ªßa Chart.js
ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);

const Dashboard = () => {
    const [statsData, setStatsData] = useState({
        totalUsers: 0,
        totalTours: 0,
        totalOrders: 0,
        totalRevenue: 0,
    });

    useEffect(() => {
        axios.get("http://localhost:8080/api/dashboard/stats")
            .then(res => {
                const data = res.data;
                setStatsData({
                    totalUsers: data.totalUsers,
                    totalTours: data.totalTours,
                    totalOrders: data.totalOrders,
                    totalRevenue: data.totalRevenue,
                });
            })
            .catch(err => {
                console.error("L·ªói l·∫•y th·ªëng k√™ dashboard:", err);
            });
    }, []);

    // D·ªØ li·ªáu th·ªëng k√™ t·ªïng
    const stats = [
        { title: "T·ªïng ƒê∆°n h√†ng", value: statsData.totalOrders, icon: <Cart size={32} />, color: "primary" },
        { title: "T·ªïng Ng∆∞·ªùi d√πng", value: statsData.totalUsers, icon: <People size={32} />, color: "success" },
        { title: "T·ªïng Tour", value: statsData.totalTours, icon: <Globe size={32} />, color: "warning" },
        { title: "Doanh thu", value: `$${Number(statsData.totalRevenue).toLocaleString()}`, icon: <CurrencyDollar size={32} />, color: "danger" },
    ];

    // D·ªØ li·ªáu bi·ªÉu ƒë·ªì ƒë∆°n h√†ng theo th√°ng (gi·∫£ l·∫≠p)
    const orderData = {
        labels: ["Th√°ng 1", "Th√°ng 2", "Th√°ng 3", "Th√°ng 4", "Th√°ng 5", "Th√°ng 6"],
        datasets: [
            {
                label: "S·ªë ƒë∆°n h√†ng",
                data: [100, 150, 300, 250, 400, 600],
                borderColor: "#007bff",
                backgroundColor: "rgba(0, 123, 255, 0.5)",
            },
        ],
    };

    // Danh s√°ch ƒë∆°n h√†ng g·∫ßn ƒë√¢y (gi·∫£ l·∫≠p)
    const recentOrders = [
        { id: "ORD001", customer: "Nguy·ªÖn VƒÉn A", amount: "$500", status: "ƒê√£ x·ª≠ l√Ω" },
        { id: "ORD002", customer: "Tr·∫ßn Th·ªã B", amount: "$350", status: "Ch·ªù x·ª≠ l√Ω" },
        { id: "ORD003", customer: "L√™ VƒÉn C", amount: "$700", status: "ƒê√£ h·ªßy" },
        { id: "ORD004", customer: "Ph·∫°m VƒÉn D", amount: "$450", status: "ƒê√£ x·ª≠ l√Ω" },
    ];

    // Badge m√†u tr·∫°ng th√°i ƒë∆°n h√†ng
    const getStatusBadge = (status: string) => {
        switch (status) {
            case "ƒê√£ x·ª≠ l√Ω":
                return <Badge bg="success">‚úÖ {status}</Badge>;
            case "Ch·ªù x·ª≠ l√Ω":
                return <Badge bg="warning">‚è≥ {status}</Badge>;
            case "ƒê√£ h·ªßy":
                return <Badge bg="danger">‚ùå {status}</Badge>;
            default:
                return <Badge bg="secondary">{status}</Badge>;
        }
    };
    const formatCurrency = (amount: number) =>
        amount.toLocaleString("vi-VN", {
            style: "currency",
            currency: "VND"
        });


    return (
        <Container className="mt-4">
            {/* H√†ng th·ªëng k√™ */}
            <Row className="mb-4">
                {stats.map((stat, index) => (
                    <Col key={index} md={3}>
                        <Card className={`border-${stat.color} shadow-sm`}>
                            <Card.Body className="text-center">
                                <div className={`text-${stat.color} mb-2`}>{stat.icon}</div>
                                <h5>{stat.title}</h5>
                                <h3 className="fw-bold">{stat.value}</h3>
                            </Card.Body>
                        </Card>
                    </Col>
                ))}
            </Row>

            {/* Bi·ªÉu ƒë·ªì & ƒê∆°n h√†ng g·∫ßn ƒë√¢y */}
            <Row>
                <Col md={8}>
                    <Card className="shadow-sm">
                        <Card.Header className="bg-primary text-white">üìà Th·ªëng k√™ ƒë∆°n h√†ng</Card.Header>
                        <Card.Body>
                            <Line data={orderData} />
                        </Card.Body>
                    </Card>
                </Col>
                <Col md={4}>
                    <Card className="shadow-sm">
                        <Card.Header className="bg-secondary text-white">üìã ƒê∆°n h√†ng g·∫ßn ƒë√¢y</Card.Header>
                        <Card.Body>
                            <Table striped bordered hover size="sm">
                                <thead>
                                <tr>
                                    <th>M√£ ƒêH</th>
                                    <th>Kh√°ch h√†ng</th>
                                    <th>S·ªë ti·ªÅn</th>
                                    <th>Tr·∫°ng th√°i</th>
                                </tr>
                                </thead>
                                <tbody>
                                {recentOrders.map((order, index) => (
                                    <tr key={index}>
                                        <td>{order.id}</td>
                                        <td>{order.customer}</td>
                                        <td>{order.amount}</td>
                                        <td>{getStatusBadge(order.status)}</td>
                                    </tr>
                                ))}
                                </tbody>
                            </Table>
                        </Card.Body>
                    </Card>
                </Col>
            </Row>
        </Container>
    );
};

export default Dashboard;
